package keplr.etype;

import java.util.Objects;

/**
 * Class abstracting the concept of Typed Key. It wraps the original key
 * together with a specific type.
 * The typed key is generated by an {@link EType} through the {@link EType#typed(K)} method,
 * that wraps itself together with the given key.
 * For efficiency reasons, we used the {@link EType#description} instead of the whole {@link EType}.
 *
 * @param <K> The type of the original key.
 */
public class TypedKey<K> {

    protected K key;
    protected String type;

    public TypedKey() {
    }

    public TypedKey(K key, String type) {
        this.key = key;
        this.type = type;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public K getKey(){
        return key;
    };

    public void setKey(K key) {
        this.key = key;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TypedKey)) return false;
        TypedKey<?> typedKey = (TypedKey<?>) o;
        return key.equals(typedKey.key) &&
                type.equals(typedKey.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(key, type);
    }



}
